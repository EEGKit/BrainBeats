% Get parameters specified by user via GUI, stoted into the "params"
% structure.
%
% Example:
%   params = getparams_gui(EEG)
%
% Cedric Cannard, April 2023

function [params, abort] = getparams_gui(EEG)


%% Main GUI to select analysis, heart data type and name, visualization, and saving

% dropdown options to select
analysisTypes = { 'Heartbeat-evoked potentials (HEP)' 'Extract EEG & HRV features from continuous data' 'Remove heart artifacts from EEG signals'};
dataTypes = { 'ECG' 'PPG' };

% callback functions
mode = "if get(gcbo,'value') == 2, set(findobj(gcbf,'userdata','analysis'),'enable','on'); else, set(findobj(gcbf,'userdata','analysis'),'enable','off'); end";
chanName = "tmpEEG = get(gcbf, 'userdata'); tmpchanlocs = tmpEEG.chanlocs; [tmp tmpval] = pop_chansel({tmpchanlocs.labels},'withindex','on'); set(findobj(gcbf,'tag','heart_channels'),'string',tmpval); clear tmp tmpEEG tmpchanlocs tmpval";
heartsig = "if get(gcbo,'value'), set(findobj(gcbf,'userdata','heartsig'),'enable','on'); else, set(findobj(gcbf,'userdata','heartsig'),'enable','off'); end";

uilist = { ...
    {'style' 'text' 'string' 'Analysis to run:' 'fontweight' 'bold' } {'style' 'popupmenu' 'string' analysisTypes 'tag' 'analysis' 'callback' mode} ...
    {} ...
    {'style' 'text' 'string' 'Heart data type' 'fontweight' 'bold'} {'style' 'popupmenu' 'string' dataTypes 'tag' 'heart_signal' 'callback' heartsig 'value' 1} ...
    {} ...
    {'style' 'text' 'string' 'Select ECG/PPG channel(s):' 'fontweight' 'bold'} {'style' 'edit' 'tag' 'heart_channels'} {'style' 'pushbutton' 'string'  '...', 'enable' 'on' 'callback'  chanName } ...
    {} ...
    {'style' 'checkbox' 'tag' 'vis_outputs' 'string' ' Visualize outputs (recommended)' 'fontweight' 'bold' 'value' 1} {} ...
    ...
    {'style' 'checkbox' 'tag' 'save' 'string' ' Save outputs' 'fontweight' 'bold' 'value' 1} {} ...
    };

uigeom = { [.3 .6] ...
    1 ...
    [.6 .3] ...
    1 ...
    [.3 .3 .3] ...
    1 ...
    [1 .2]  ...
    [1 .2] };

% Launch GUI and get parameters from user
[res,~,~,params] = inputgui(uigeom,uilist,'pophelp(''pop_BrainBeats'')','BrainBeats EEGLAB plugin',EEG);
if isempty(res), abort = true; return; end  % Abort if no input

% Analysis choice and check data compatibility for that analysis
if params.analysis == 1
    params.analysis = 'hep';
elseif params.analysis == 2
    params.analysis = 'features';
elseif params.analysis == 3
    params.analysis = 'rm_heart';
else
    % If user didn't select any analysis, select based on data format
    if length(size(EEG.data)) == 2
        params.analysis = 'features';
        disp("You did not select which analysis you want to perform. Continuous data detected: performing feature-based analysis.")
    elseif length(size(EEG.data)) == 3
        params.analysis = 'hep';
        disp("You did not select which analysis you want to perform. Epoched data detected: performing HEP analysis.")
    end
end

% Extract heart signal type
params.heart_signal = lower(dataTypes{params.heart_signal});

% Extract heart channel names (if there are several)
if ~isempty(params.heart_channels)
    if contains(params.heart_channels,' ')
        params.heart_channels = split(params.heart_channels);
    end
else
    error('You must select your ECG/PPG channels from the list')
end

%% GUI for HEP

if strcmp(params.analysis, 'hep') && strcmp(params.heart_signal, 'ecg')

    % dropdown options for ECG
    rrArtMethod = { 'Shape-preserving piecewise cubic (default)' ...
        'Linear' 'Cubic' 'Nearest neighbor' 'Next neighbor' 'Previous neighbor' 'Spline'  ...
        'Cubic convolution' 'Modified Akima cubic' 'Remove them'};
    searchback = {'Yes (default)' 'No'};

    % dropdown options for EEG
    linefreq = {'60 Hz (US)' '50 Hz (Europe)'};
    refmethod = {'Infinity (default)' 'Average' 'Off'};
    filttype = {'Causal nonlinear (default)' 'Non-causal linear'};
    cleantrials = {'Aggressive' 'Moderate (default)' 'Conservative'};
    icamethod = {'Fast (default)' 'Normal' 'Long but replicable'};

    % Callback functions
    cleanHEART = "if get(gcbo,'value'), set(findobj(gcbf,'userdata','clean_heart'),'enable','on'); else, set(findobj(gcbf,'userdata','clean_heart'),'enable','off'); end";
    cleanEEG = "if get(gcbo,'value'), set(findobj(gcbf,'userdata','clean_eeg'),'enable','on'); else, set(findobj(gcbf,'userdata','clean_eeg'),'enable','off'); end";

    % GUI
    uilist = { ...
        {'style' 'checkbox' 'string' 'Preprocess ECG' 'fontweight' 'bold' 'tag' 'clean_heart' 'callback' cleanHEART 'value' 1} ...
        ...
        {} {'style' 'text' 'string' 'Peak threshold to detect QRS complex:' } {'style' 'edit' 'string' '0.6' 'tag' 'ecg_peakthresh' 'enable' 'on' 'userdata' 'clean_heart' }  ...
        ...
        {} {'style' 'text' 'string' 'Perform searchback to detect QRS complex:' } {'style' 'popupmenu' 'string' searchback 'tag' 'ecg_searchback' 'enable' 'on' 'userdata' 'clean_heart' }  ...
        ...
        {} {'style' 'text' 'string' 'Refractory period to detect QRS complex:' } {'style' 'edit' 'string' '0.25' 'tag' 'ecg_refperiod' 'enable' 'on' 'userdata' 'clean_heart' }  ...
        ...
        {} {'style' 'text' 'string' 'Physiologic limits to detect RR artifacts:' } {'style' 'edit' 'string' '[.375 2]' 'tag' 'ecg_refperiod' 'enable' 'on' 'userdata' 'clean_heart' }  ...
        ...
        {} {'style' 'text' 'string' 'Interpolation method for RR artifacts:' } {'style' 'popupmenu' 'string' rrArtMethod 'userdata' 'clean_heart' 'enable' 'on' 'userdata' 'clean_heart' 'value' 1 'tag' 'rr_correct' } ...
        ...
        {'style' 'checkbox' 'string' 'Preprocess EEG data' 'fontweight' 'bold' 'tag' 'clean_eeg' 'callback' cleanEEG 'value' 0} ...
        ...
        {} {'style' 'text' 'string' 'Re-reference data to:' } {'style' 'popupmenu' 'string' refmethod 'tag' 'reref' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Power line noise (Hz):' } {'style' 'popupmenu' 'string' linefreq 'tag' 'highpass' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Highpass filter:' } {'style' 'edit' 'string' '1' 'tag' 'highpass' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Lowpass filter:' } {'style' 'edit' 'string' '40' 'tag' 'lowpass' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Filter type:' } {'style' 'popupmenu' 'string' filttype 'tag' 'filttype' 'enable' 'off' 'userdata' 'clean_eeg' 'value' 1}  ...
        ...
        {} {'style' 'text' 'string' 'Longest flat lines before removing channel (in sec):' } {'style' 'edit' 'string' '5' 'tag' 'flatline' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Minimum correlation before removing channel (.5-.9):' } {'style' 'edit' 'string' '.65' 'tag' 'corrThresh' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Maximum portion tolerated before removing channel (0.1-0.5):' } {'style' 'edit' 'string' '.33' 'tag' 'maxBad' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Method to reject bad segments:' } {'style' 'popupmenu' 'string' cleantrials 'tag' 'detectMethod' 'enable' 'off' 'userdata' 'clean_eeg' 'value' 2}  ...
        ...
        {} {'style' 'text' 'string' 'ICA method to extract artifactual components:' } {'style' 'popupmenu' 'string' icamethod 'tag' 'icamethod' 'enable' 'off' 'userdata' 'clean_eeg' 'value' 1}  ...
        ...
        {'style' 'text' 'string' 'Minimum inter-beat interval (IBI; in ms):' 'fontweight' 'bold' } {'style' 'edit' 'string' '550' 'tag' 'ibi_size' 'enable' 'on' 'userdata' 'clean_eeg' } {} ...
        ...
        {'style' 'checkbox' 'string' 'Visualize preprocessings' 'tag' 'vis_cleaning' 'fontweight' 'bold' 'value' 1}  ...
        ...
        {'style' 'checkbox' 'string' 'Keep heart channel in final output?' 'tag' 'keepheart' 'fontweight' 'bold' 'value' 0} ...
        };
    uigeom = {
        .3 ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        .3 ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.05 .03 0.05] ...
        ...
        .3 ...
        ...
        .3 ...
        };
    [res,~,~,params_hep] = inputgui(uigeom,uilist,'pophelp(''brainbeats_process'')','BrainBeats: preprocessing parameters for HEP mode',EEG);
    if isempty(res), abort = true; return; end % Abort if no input
end

%% GUI for Features mode

if strcmp(params.analysis, 'features')

    % Dropdown options
    rrArtMethod = { 'Shape-preserving piecewise cubic (default)' ...
        'Linear' 'Cubic' 'Nearest neighbor' 'Next neighbor' 'Previous neighbor' 'Spline'  ...
        'Cubic convolution' 'Modified Akima cubic' 'Remove them'};
    linefreq = {'60 Hz (US)' '50 Hz (Europe)'};
    refmethod = {'Infinity (default)' 'Average' 'Off'};
    filttype = {'Causal nonlinear (default)' 'Non-causal linear'};
    icamethod = {'Fast (default)' 'Normal' 'Long but replicable'};
    hrvpwrmethod = {'Lomb-Scargle periodogram (default)' 'Welch (requires resampling)' 'FFT (requires resampling)'};

    % params.hrv_spec = 'LombScargle';  % 'LombScargle' (default), 'pwelch', 'fft'
    % params.hrv_overlap =  0.25; % 25% overlap for sliding windows

    % Callback functions
    cleanHEART = "if get(gcbo,'value'), set(findobj(gcbf,'userdata','clean_heart'),'enable','on'); else, set(findobj(gcbf,'userdata','clean_heart'),'enable','off'); end";
    cleanEEG = "if get(gcbo,'value'), set(findobj(gcbf,'userdata','clean_eeg'),'enable','on'); else, set(findobj(gcbf,'userdata','clean_eeg'),'enable','off'); end";
    hrv_features = "if get(gcbo,'value'), set(findobj(gcbf,'userdata','hrv_features'),'enable','on'); else, set(findobj(gcbf,'userdata','hrv_features'),'enable','off'); end";
    eeg_features = "if get(gcbo,'value'), set(findobj(gcbf,'userdata','eeg_features'),'enable','on'); else, set(findobj(gcbf,'userdata','eeg_features'),'enable','off'); end";

    % GUI
    uilist = { ...
        {'style' 'checkbox' 'string' 'HRV features' 'fontweight' 'bold' 'tag' 'hrv_features' 'enable' 'on' 'callback' hrv_features 'value' 1} ...
        ...
        {'style' 'checkbox' 'string' 'Preprocess heart data' 'fontweight' 'bold' 'tag' 'clean_heart' 'userdata' 'hrv_features' 'callback' cleanHEART 'value' 1} ...
        ...
        {} {'style' 'text' 'string' 'Interpolation method for RR artifacts:' } {'style' 'popupmenu' 'string' rrArtMethod 'enable' 'on' 'value' 1 'tag' 'rr_correct'} ...
        ...
        {} {'style' 'checkbox' 'tag' 'hrv_time' 'string' ' Time domain (SDNN, RMSSD, pNN50)' 'value' 1 'userdata' 'hrv_features' 'enable' 'on'} ...
        ...
        {'style' 'checkbox' 'string' 'EEG features' 'fontweight' 'bold' 'tag' 'eeg_features' 'enable' 'on' 'callback' eeg_features 'value' 1} ...
        ...
        {'style' 'checkbox' 'string' 'Preprocess EEG data' 'fontweight' 'bold' 'tag' 'clean_eeg' 'userdata' 'eeg_features' 'callback' cleanEEG 'value' 0} ...
        ...
        {} {'style' 'text' 'string' 'Re-reference data to:' } {'style' 'popupmenu' 'string' refmethod 'tag' 'reref' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Power line noise (Hz):' } {'style' 'popupmenu' 'string' linefreq 'tag' 'highpass' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Highpass filter:' } {'style' 'edit' 'string' '1' 'tag' 'highpass' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Lowpass filter:' } {'style' 'edit' 'string' '40' 'tag' 'lowpass' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Filter type:' } {'style' 'popupmenu' 'string' filttype 'tag' 'filttype' 'enable' 'off' 'userdata' 'clean_eeg' 'value' 1}  ...
        ...
        {} {'style' 'text' 'string' 'Longest flat lines before removing channel (in sec):' } {'style' 'edit' 'string' '5' 'tag' 'flatline' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Minimum correlation before removing channel (.5-.9):' } {'style' 'edit' 'string' '.65' 'tag' 'corrThresh' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Maximum portion tolerated before removing channel (in %):' } {'style' 'edit' 'string' '33' 'tag' 'maxBad' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Threshold to reject bad segments with ASR (1-100):' } {'style' 'edit' 'string' '30' 'tag' 'asr_cutoff' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'Available RAM to use for ASR (in %):' } {'style' 'edit' 'string' '85' 'tag' 'asr_mem' 'enable' 'off' 'userdata' 'clean_eeg' }  ...
        ...
        {} {'style' 'text' 'string' 'ICA method to extract artifactual components:' } {'style' 'popupmenu' 'string' icamethod 'tag' 'icamethod' 'enable' 'off' 'userdata' 'clean_eeg' 'value' 1}  ...
        ...
        {'style' 'checkbox' 'string' 'Visualize preprocessings' 'tag' 'vis_cleaning' 'fontweight' 'bold' 'value' 1}  ...
        ...
        {'style' 'checkbox' 'string' 'Keep heart channel in final output?' 'tag' 'keepheart' 'fontweight' 'bold' 'value' 0} ...
        };
    uigeom = {
        .3 ...
        ...
        .3 ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1] ...
        ...
        .3 ...
        ...
        .3 ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        [.01 .1 .08] ...
        ...
        .3 ...
        ...
        .3 ...
        };
    [res,~,~,params_feat] = inputgui(uigeom,uilist,'pophelp(''brainbeats_process'')','BrainBeats: Features parameters',EEG);
    if isempty(res), abort = true; return; end % Abort if no input
end

% ...
% ...
% {} {'style' 'checkbox' 'tag' 'hrv_frequency' 'string' ' Frequency domain (ULF, VLF, LF, HF, LF/HF, Total power)' 'value' 1 'userdata' 'hrv' 'enable' 'off'} ...
% ...
% {} {'style' 'checkbox' 'tag' 'hrv_nonlinear' 'string' ' Nonlinear domain (Poincaré, PRSA, entropy)' 'value' 1 'userdata' 'hrv' 'enable' 'off'} ...
% {} ...
% {} {'style' 'checkbox' 'tag' 'norm' 'string' ' Normalize (EEG and/or HRV) frequency-domain features ' 'value' 1 'userdata' 'analysis' 'enable' 'off'} ...
% {} ...
% {'style' 'checkbox' 'tag' 'parpool' 'string' ' Use parallel computing (recommended for computing EEG features)' 'fontweight' 'bold' 'value' 0 } {} ...

%% GUI for Features mode

% callback functions
cleanEEG = "if get(gcbo,'value'), set(findobj(gcbf,'userdata','clean_eeg'),'enable','on'); else, set(findobj(gcbf,'userdata','clean_eeg'),'enable','off'); end";
eeg_features = "if get(gcbo,'value'), set(findobj(gcbf,'userdata','eeg'),'enable','on'); else, set(findobj(gcbf,'userdata','eeg'),'enable','off'); end";
hrv_features = "if get(gcbo,'value'), set(findobj(gcbf,'userdata','hrv'),'enable','on'); else, set(findobj(gcbf,'userdata','hrv'),'enable','off'); end";

uilist = { ...
    {'style' 'text' 'string' 'Interpolation method for RR artifacts:' 'fontweight' 'bold' } {'style' 'popupmenu' 'string' rrArtMethod 'enable' 'on' 'value' 1 'tag' 'rr_correct'} ...
    {} ...
    {'style' 'text' 'string' 'Clean EEG data?' 'fontweight' 'bold' } {'style' 'popupmenu' 'string' cleanEEG 'tag' 'clean_eeg'} ...
    {} ...
    {} {'style' 'checkbox' 'string' ' EEG features' 'fontweight' 'bold' 'tag' 'eeg' 'userdata' 'analysis' 'enable' 'off' 'callback' eeg_features 'value' 0} ...
    ...
    {} {'style' 'checkbox' 'tag' 'eeg_time' 'string' ' Time domain (RMS, mode, skewness, kurtosis, IQR, etc.)' 'value' 1 'userdata' 'eeg' 'enable' 'off'} ...
    ...
    {} {'style' 'checkbox' 'tag' 'eeg_frequency' 'string' ' Frequency domain (band-power, IAF, asymmetry, coherence)' 'value' 1 'userdata' 'eeg' 'enable' 'off'} ...
    ...
    {} {'style' 'checkbox' 'tag' 'eeg_nonlinear' 'string' ' Nonlinear domain (entropy)' 'value' 1 'userdata' 'eeg' 'enable' 'off'} ...
    {} ...
    {} {'style' 'checkbox' 'string' ' HRV features' 'fontweight' 'bold' 'tag' 'hrv' 'userdata' 'analysis' 'enable' 'off' 'callback' hrv_features 'value' 0} ...
    ...
    {} {'style' 'checkbox' 'tag' 'hrv_time' 'string' ' Time domain (NN features, SDNN, RMSSD, pNN50)' 'value' 1 'userdata' 'hrv' 'enable' 'off'} ...
    ...
    {} {'style' 'checkbox' 'tag' 'hrv_frequency' 'string' ' Frequency domain (ULF, VLF, LF, HF, LF/HF, Total power)' 'value' 1 'userdata' 'hrv' 'enable' 'off'} ...
    ...
    {} {'style' 'checkbox' 'tag' 'hrv_nonlinear' 'string' ' Nonlinear domain (Poincaré, PRSA, entropy)' 'value' 1 'userdata' 'hrv' 'enable' 'off'} ...
    {} ...
    {} {'style' 'checkbox' 'tag' 'norm' 'string' ' Normalize (EEG and/or HRV) frequency-domain features ' 'value' 1 'userdata' 'analysis' 'enable' 'off'} ...
    {} ...
    {'style' 'checkbox' 'tag' 'parpool' 'string' ' Use parallel computing (recommended for computing EEG features)' 'fontweight' 'bold' 'value' 0 } {} ...
    ...
    {'style' 'checkbox' 'tag' 'gpu' 'string' ' Use GPU computing' 'fontweight' 'bold' 'value' 0} {} ...
    };

uigeom = {
    [.3 .6] ...
    1 ...
    [.3 .4] ...
    1 ...
    [.15 .6]  ...
    [.2 .6]  ...
    [.2 .6]  ...
    [.2 .6]  ...
    1 ...
    [.15 .6]  ...
    [.2 .6]  ...
    [.2 .6]  ...
    [.2 .6]  ...
    1  ...
    [.2 .8]  ...
    1 ...
    [1 .2]  ...
    [1 .2]  ...
    };

% Launch GUI and get parameters from user
[res,~,~,params_hep] = inputgui(uigeom,uilist,'pophelp(''pop_BrainBeats'')','BrainBeats EEGLAB plugin',EEG);
if isempty(res), abort = true; return; end  % Abort if no input

%% Convert params to expected format

% RR artfact correction method
if ~isempty(params.rr_correct)
    switch params.rr_correct
        case 1
            params.rr_correct = 'pchip';  % default
        case 2
            params.rr_correct = 'linear';
        case 3
            params.rr_correct = 'cubic';
        case 4
            params.rr_correct = 'nearest';
        case 5
            params.rr_correct = 'next';
        case 6
            params.rr_correct = 'previous';
        case 7
            params.rr_correct = 'spline';
        case 8
            params.rr_correct = 'cubic';
        case 9
            params.rr_correct = 'makima';
        case 'Remove'
            params.rr_correct = 'remove';
    end
end

% Clean EEG
if params.clean_eeg == 1
    params.clean_eeg = false;
elseif params.clean_eeg == 2
    params.clean_eeg = true;
end

% mergestructs = @(x,y) cell2struct([struct2cell(x);struct2cell(y)],[fieldnames(x);fieldnames(y)]);


