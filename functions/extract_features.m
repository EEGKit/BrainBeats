%% Extract HRV & EEG relevant features generated by brainbeats_process and 
% output them as a table.
% 
% Cedric Cannard, 2023

function [hrv, eeg] = extract_features(Features)


%% HRV

if isfield(Features,'HRV')
    
    hrv = table.empty;

    % Time
    if isfield(Features.HRV, 'time')
        hrv = struct2table(Features.HRV.time);
    end
    
    % Frequency (average across windows)
    if isfield(Features.HRV, 'frequency')
    
        % list of fields
        features = fieldnames(Features.HRV.frequency);
    
        % ULF
        if sum(contains(features,'ulf')) > 0
            hrv(:,size(hrv,2)+1) = table(mean(Features.HRV.frequency.ulf));
            hrv.Properties.VariableNames(end) = {'ULF-HRV'};
        end
    
        % VLF
        if sum(contains(features,'vlf')) > 0
            hrv(:,size(hrv,2)+1) = table(mean(Features.HRV.frequency.vlf));
            hrv.Properties.VariableNames(end) = {'VLF-HRV'};
        end
    
        % LF
        if sum(contains(features,'lf')) > 0
            hrv(:,size(hrv,2)+1) = table(mean(Features.HRV.frequency.lf));
            hrv.Properties.VariableNames(end) = {'LF-HRV'};
        end
    
        % HF
        if sum(contains(features,'hf')) > 0
            hrv(:,size(hrv,2)+1) = table(mean(Features.HRV.frequency.hf));
            hrv.Properties.VariableNames(end) = {'HF-HRV'};
        end
    
        % LF/HF
        if sum(contains(features,'lfhf')) > 0
            hrv(:,size(hrv,2)+1) = table(mean(Features.HRV.frequency.lfhf));
            hrv.Properties.VariableNames(end) = {'LF/HF'};
        end
    end
    
    % Nonlinear (average across windows)
    if isfield(Features.HRV, 'nonlinear')
    
        % list of fields
        features = fieldnames(Features.HRV.nonlinear);
    
        % Poincare
        if sum(contains(features,'Poincare')) > 0
            hrv(:,size(hrv,2)+1) = table(Features.HRV.nonlinear.Poincare.SD1);
            hrv.Properties.VariableNames(end) = {'Poincaré: SD1'};
    
            hrv(:,size(hrv,2)+1) = table(Features.HRV.nonlinear.Poincare.SD2);
            hrv.Properties.VariableNames(end) = {'Poincaré: SD2'};
    
            hrv(:,size(hrv,2)+1) = table(Features.HRV.nonlinear.Poincare.SD1SD2);
            hrv.Properties.VariableNames(end) = {'SD1/SD2'};
        end
    
        % PRSA
        if sum(contains(features,'PRSA')) > 0
            hrv(:,size(hrv,2)+1) = table(Features.HRV.nonlinear.PRSA_AC);
            hrv.Properties.VariableNames(end) = {'PRSA_AC'};
    
            hrv(:,size(hrv,2)+1) = table(Features.HRV.nonlinear.PRSA_DC);
            hrv.Properties.VariableNames(end) = {'PRSA_DC'};
        end
    
        % Fuzzy entropy
        if sum(contains(features,'FE')) > 0
            hrv(:,size(hrv,2)+1) = table(Features.HRV.nonlinear.FE);
            hrv.Properties.VariableNames(end) = {'HRV-FE'};
        end
    
        % Multiscale fuzzy entropy
        if sum(contains(features,'MFE')) > 0
            % Peak scale number
            [~, peakScale] = max(Features.HRV.nonlinear.MFE);
            hrv(:,size(hrv,2)+1) = table(peakScale);
            hrv.Properties.VariableNames(end) = {'HRV-MFE_peak'};
            
            % Area under the curve (using trapezoidal numerical integration)
            hrv(:,size(hrv,2)+1) = table(trapz(Features.HRV.nonlinear.MFE));
            hrv.Properties.VariableNames(end) = {'HRV-MFE_auc'};
        end
    
    end
end


%% EEG

if isfield(Features,'EEG')
    
    eeg = table.empty;

    % Time
    if isfield(Features.EEG, 'time')
        features = fieldnames(Features.EEG.time);
        for iFeat = 1:length(features)
            fieldname = features{iFeat};
            eeg(:,size(eeg,2)+1) = table(Features.EEG.time.(fieldname));
            eeg.Properties.VariableNames(end) = {sprintf('EEG-%s', fieldname)};
        end        
    end

    % Frequency
    if isfield(Features.EEG, 'frequency')
        features = fieldnames(Features.EEG.frequency);

        % Main bands
        if sum(contains(features,'delta')) > 0
            eeg(:,size(eeg,2)+1) = table(Features.EEG.frequency.delta);
            eeg.Properties.VariableNames(end) = {'EEG-delta'};
        end
        if sum(contains(features,'theta')) > 0
            eeg(:,size(eeg,2)+1) = table(Features.EEG.frequency.theta);
            eeg.Properties.VariableNames(end) = {'EEG-theta'};
        end
        if sum(contains(features,'alpha')) > 0
            eeg(:,size(eeg,2)+1) = table(Features.EEG.frequency.alpha);
            eeg.Properties.VariableNames(end) = {'EEG-alpha'};
        end
        if sum(contains(features,'beta')) > 0
            eeg(:,size(eeg,2)+1) = table(Features.EEG.frequency.beta);
            eeg.Properties.VariableNames(end) = {'EEG-beta'};
        end
        if sum(contains(features,'low_gamma')) > 0
            eeg(:,size(eeg,2)+1) = table(Features.EEG.frequency.low_gamma);
            eeg.Properties.VariableNames(end) = {'EEG-low_gamma'};
        end
    
        % Main bands (normalized)
        if sum(contains(features,'delta_norm')) > 0
            eeg(:,size(eeg,2)+1) = table(Features.EEG.frequency.delta_norm);
            eeg.Properties.VariableNames(end) = {'EEG-delta_norm'};
        end
        if sum(contains(features,'theta_norm')) > 0
            eeg(:,size(eeg,2)+1) = table(Features.EEG.frequency.theta_norm);
            eeg.Properties.VariableNames(end) = {'EEG-theta_norm'};
        end
        if sum(contains(features,'alpha_norm')) > 0
            eeg(:,size(eeg,2)+1) = table(Features.EEG.frequency.alpha_norm);
            eeg.Properties.VariableNames(end) = {'EEG-alpha_norm'};
        end
        if sum(contains(features,'beta_norm')) > 0
            eeg(:,size(eeg,2)+1) = table(Features.EEG.frequency.beta_norm);
            eeg.Properties.VariableNames(end) = {'EEG-beta_norm'};
        end
        if sum(contains(features,'low_gamma_norm')) > 0
            eeg(:,size(eeg,2)+1) = table(Features.EEG.frequency.low_gamma_norm);
            eeg.Properties.VariableNames(end) = {'EEG-low_gamma_norm'};
        end

        % Main bands (individualized)
        % if sum(contains(features,'delta_indiv')) > 0
        %     eeg(:,size(eeg,2)+1) = table(mean(Features.EEG.frequency.delta_indiv,'omitnan'));
        %     eeg.Properties.VariableNames(end) = {'EEG-delta_indiv'};
        % end
        % if sum(contains(features,'theta_indiv')) > 0
        %     eeg(:,size(eeg,2)+1) = table(mean(Features.EEG.frequency.theta_indiv,'omitnan'));
        %     eeg.Properties.VariableNames(end) = {'EEG-theta_indiv'};
        % end
        % if sum(contains(features,'alpha_indiv')) > 0
        %     eeg(:,size(eeg,2)+1) = table(mean(Features.EEG.frequency.alpha_indiv,'omitnan'));
        %     eeg.Properties.VariableNames(end) = {'EEG-alpha_indiv'};
        % end
        % if sum(contains(features,'beta_indiv')) > 0
        %     eeg(:,size(eeg,2)+1) = table(mean(Features.EEG.frequency.beta_indiv,'omitnan'));
        %     eeg.Properties.VariableNames(end) = {'EEG-beta_indiv'};
        % end
        % if sum(contains(features,'low_gamma_indiv')) > 0
        %     eeg(:,size(eeg,2)+1) = table(mean(Features.EEG.frequency.low_gamma_indiv,'omitnan'));
        %     eeg.Properties.VariableNames(end) = {'EEG-low_gamma_indiv'};
        % end


        % IAF
        if sum(contains(features,'IAF')) > 0
            eeg(:,size(eeg,2)+1) = table(Features.EEG.frequency.IAF);
            eeg.Properties.VariableNames(end) = {'EEG-IAF'};
        end

        % Alpha asymmetry
        if sum(contains(features,'asymmetry')) > 0
            asy = Features.EEG.frequency.asymmetry;
            pairs = Features.EEG.frequency.asymmetry_pairs;
            for iPair = 1:length(asy)
                eeg(:,size(eeg,2)+1) = table(asy(iPair));
                eeg.Properties.VariableNames(end) = { sprintf('Asy (%s)',pairs{iPair}) };
            end
        end

        % EEG coherence
        if sum(contains(features,'eeg_coh')) > 0
            coh = Features.EEG.frequency.eeg_coh;
            f = Features.EEG.frequency.eeg_coh_f;
            pairs = Features.EEG.frequency.asymmetry_pairs;
            for iPair = 1:length(asy)
                eeg(:,size(eeg,2)+1) = table(asy(iPair));
                eeg.Properties.VariableNames(end) = { sprintf('Asy (%s)',pairs{iPair}) };
            end
        end

    end
end


