%% Brainbeats_analyze
% 
% 1) Extract EEG and HRV features from structures generated by brainbeats_process
%   and converts them to tables. 
% 2) Perform feature selection using random forest to keep only features 
%   with highest importance, 
% 3) apply PCA-dimension reduction (if desired), 
% 4) normalize, 
% 5) Run statistics (robust correlations if user for associations, and 
%   Yuen t-tests for differences).
%
% Copyright (C) - BrainBeats - Cedric Cannard - 2023

function brainbeats_analyze(params)

% error('Sorry, group level statistics are not available yet. Work in progress!Coming soon!')

% norm = false;

% Go to data directory
% params.data_path = uigetdir(pwd, 'Select a folder');
cd(params.data_path)

% Extract file paths and names
disp('Searching for files...')
filenames = dir;
if any(contains({filenames.name},'HEP.set'))
    % error('add code: files are at the root')
    filenames = contains({filenames.name}, 'HEP.set');

elseif any(contains({filenames.name},'participants.tsv'))

    % Extract participants information from tsv file
    disp("Extracting files from a BIDS folder...")
    tmp = readtable("participants.tsv","FileType","text",'Delimiter','\t');
    if any(contains(tmp.Properties.VariableNames,"id"))
        ids = tmp.participant_id;
    else
        error('could not extract participants IDs from TSV file')
    end
    if any(contains(tmp.Properties.VariableNames,"age"))
        age = round(tmp.age);
    end
    if any(contains(tmp.Properties.VariableNames,"gender"))
        gender = tmp.gender;
    end
    if any(contains(tmp.Properties.VariableNames,"grp"))
        grp = tmp.type;
    end

    % File paths and names
    filepaths = fullfile(params.data_path, ids, 'eeg');
    filenames = {};
    for i =  1:length(filepaths)
        try
            cd(filepaths{i})
            tmp2 = dir; tmp2 = {tmp2.name};
            filename = tmp2(contains(tmp2,'_HEP.set'));
            if ~isempty(filename)
                filenames(i) = filename;
            end
            cd(params.data_path)
        catch
            warning("Failed to access this participant's folder: %s", ids{i})
        end
    end
end

% Load data
for iFile = 1:length(filenames)
    
end
HRV = table.empty;
EEG = table.empty;

% Condition/group 1
% [files,path] = uigetfile('*.mat','Select feature files for condition/group 1','MultiSelect','on');
% files = {'sub-01_mindwandering_session-1_features.mat'	'sub-02_mindwandering_session-2_features.mat'	'sub-03_mindwandering_session-2_features.mat'	'sub-04_mindwandering_session-1_features.mat'	'sub-05_mindwandering_session-1_features.mat'	'sub-06_mindwandering_session-1_features.mat'	'sub-07_mindwandering_session-2_features.mat'	'sub-08_mindwandering_session-1_features.mat'	'sub-09_mindwandering_session-1_features.mat'	'sub-10_mindwandering_session-1_features.mat'	'sub-11_mindwandering_session-1_features.mat'	'sub-12_mindwandering_session-1_features.mat'	'sub-13_mindwandering_session-2_features.mat'};
files = {'sub-54_pre_features-eeg.mat'	'sub-56_pre_features-eeg.mat'};
path = fullfile(mainDir,'data');
for iFile = 1:length(files)
    
    % Load features generated by brainbeats_process
    load(fullfile(path,files{iFile}),'Features');

    % Extract relevant features in Table format: condition/group 1
    [hrv, eeg] = extract_features(Features);   
    hrv(:,size(hrv,2)+1) = table(1);    % label 1 for condition/group 1
    hrv.Properties.VariableNames(end) = {'Label'};

    % Merge into Master tables
    try
        HRV(iFile,:) = hrv;
        EEG(iFile,:) = eeg;
    catch
        error('Failed to import HRV/EEG features for file %s into Master table. \nThis can occur if you computed different features for this files', files{iFile})
    end
end

% Condition/group 2
% [files,path] = uigetfile('*.mat','Select feature files for condition/group 2','MultiSelect','on');
files = {'sub-01_trance_session-1_features.mat'	'sub-02_trance_session-1_features.mat'	'sub-03_trance_session-1_features.mat'	'sub-04_trance_session-1_features.mat'	'sub-05_trance_session-1_features.mat'	'sub-06_trance_session-1_features.mat'	'sub-07_trance_session-2_features.mat'	'sub-08_trance_session-1_features.mat'	'sub-09_trance_session-1_features.mat'	'sub-10_trance_session-1_features.mat'	'sub-11_trance_session-1_features.mat'	'sub-12_trance_session-1_features.mat'	'sub-13_trance_session-2_features.mat'};
for iFile = 1:length(files)

    % Extract relevant features in Table format: condition/group 1
    load(fullfile(path,files{iFile}),'Features');
    [hrv, eeg] = extract_features(Features);   
    hrv(:,size(hrv,2)+1) = table(2);    % label 1 for condition/group 1
    hrv.Properties.VariableNames(end) = {'Label'};

    % Merge into Master tables
    try
        HRV(end+1,:) = hrv;
        EEG(end+1,:) = eeg;
    catch
        error('Failed to import HRV/EEG features for file %s into Master table. \nThis can occur if you computed different features for this files', files{iFile})
    end
end

% Normalize 
if norm
    disp('Normalizing data across subjects');
    HRV_norm = array2table(zscore(table2array(HRV(:,1:end-1))));
    HRV_norm(:,end+1) = HRV(:,end);
    HRV_norm.Properties.VariableNames = HRV.Properties.VariableNames;
    HRV = HRV_norm;
end

fprintf('Done extracting and reformatting features for analysis. \n')
writetable(HRV,fullfile(outDir,'Features_HRV.csv'))
writetable(HRV,fullfile(outDir,'Features_EEG.csv'))

%% Feature selection using random forest (train bagged ensemble of 5000 
% regression trees).

% clear; close all; clc
% Load tables if erased for some reason
% HRV = readtable(fullfile(outDir,'Features_HRV.csv'),'VariableNamingRule','preserve');
% EEG = readtable(fullfile(outDir,'Features_EEG.csv'),'VariableNamingRule','preserve');

% % Quick check of number of files per condition/group
labels = categorical(HRV.Label);
summary(labels)

% use interaction-curvature test to select split predictors ('allsplits',
%       'curvature', 'interaction-curvature')
% use surrogate splits to increase accuracy (when dataset includes missing values)
t = templateTree('NumVariablesToSample','all','PredictorSelection','interaction-curvature','Surrogate','on');
Mdl = fitrensemble(HRV(:,1:end-1),HRV.Label,'Method','Bag', ...
    'NumLearningCycles',5000,'Learners',t);
yHat = oobPredict(Mdl);
R2 = corr(Mdl.Y,yHat)^2;  
fprintf('Model R2 = %g (i.e., variability explained by the model) \n', round(R2,2)) % variability around the mean explained by mdl

% Permute out-of-bag observations among trees to estimate features' importance
impOOB = oobPermutedPredictorImportance(Mdl);
figure('color','w'); 
subplot(2,1,1)
bar(impOOB)
% title('Unbiased Predictor Importance Estimates'); 
xlabel('Predictor variable'); ylabel('Importance'); 
h = gca; h.XTickLabel = Mdl.PredictorNames; h.XTickLabelRotation = 45;
h.TickLabelInterpreter = 'none';

% Compare predictor importance estimates by permuting out-of-bag observations 
% and those estimates obtained by summing gains in the mean squared error
% (MSE) due to splits on each predictor. Also, obtain predictor association 
% measures estimated by surrogate splits. 
[impGain,predAssociation] = predictorImportance(Mdl);
hold on; 
plot(1:numel(Mdl.PredictorNames),impOOB,'linewidth',3)
plot(1:numel(Mdl.PredictorNames),impGain,'linewidth',3)
title('Predictor Importance Estimation Comparison')
legend('', 'OOB permuted','MSE improvement')
grid on

% Assess predictive measure association to indicate similarity between
% decision rules that split observations. The best surrogate decision split 
% yields the maximum predictive measure of association. You can infer the 
% strength of the relationship between pairs of predictors using the elements 
% of predAssociation. Larger values indicate more highly correlated pairs of 
% predictors.
subplot(2,1,2)
imagesc(predAssociation); title('Predictor Association Estimates')
colorbar; h = gca; h.XTickLabel = Mdl.PredictorNames;
h.XTickLabelRotation = 45; h.TickLabelInterpreter = 'none';
h.YTickLabel = Mdl.PredictorNames;

% Save figure
set(findall(gcf,'type','axes'),'fontSize',10,'fontweight','bold'); 
saveas(gcf,fullfile(path,'diagnostic_HRV-features.png')); close(gcf);

% Input the strongest association here (yellow or green), if < .7 association
% is not high enough to indicate strong relationship between the 2 predictors
% predAssociation(1,2)  % row,column
% predAssociation(1,7)  % row,column
% predAssociation(1,8)  % row,column

% Run Random Forest again using selected predictors and compare R2
t = templateTree('PredictorSelection','interaction-curvature','Surrogate','off'); % For reproducibility of random predictor selections
MdlReduced  = fitrensemble(HRV(:,{ 'NN_mean' 'NN_skew' 'NN_kurt' 'RMSSD' 'pNN50' 'SD1/SD2'}), ...
    HRV.Label,'Method','Bag','NumLearningCycles',5000,'Learners',t);
yHatReduced = oobPredict(MdlReduced);
r2Reduced = corr(Mdl.Y,yHatReduced)^2;
fprintf('Model R2 = %g \n', round(R2,2))
fprintf('Reduced model R2 = %g \n', round(r2Reduced,2))

% Keep only best predictors and train classifiers models
HRV = HRV(:,MdlReduced.PredictorNames); 
writetable(HRV,fullfile(outDir,'Features_selected_HRV.csv'))

%% CORRELATION PLOT

% Condition 1
C1 = corrcoef([table2array(HRV) table2array(EEG) ]);
labels = [HRV.Properties.VariableNames EEG.Properties.VariableNames ];
plot_corrmatrix(C1,labels)

load hospital
X = [hospital.Age hospital.Weight];
labels = {'Age' 'Weight'};
figure('color','w'); 
subplot(3,1,1); plotmatrix(X); title('Scatter plot'); 
R = corrcoef(X);
subplot(3,1,2); imagesc(R); title('Correlation coefficient (R)'); colorbar
subplot(3,1,3)
plot_corrmatrix(R,labels)

%% Z-normalization

X = table2array(HRV);
X = zscore(X); 

%% PCA dimension reduction

nComps = get_nPCA(data, 99, true)


